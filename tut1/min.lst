     1                                  ;  hello.asm  a first program for nasm for Linux, Intel, gcc
     2                                  ;
     3                                  ; assemble: nasm -f elf -l hello.lst  hello.asm
     4                                  ; link:     gcc -o hello  hello.o
     5                                  ; run:          hello 
     6                                  ; output is:    Hello World 
     7                                  
     8                                  extern printf
     9                                  
    10                                          SECTION .data       ; data section
    11 00000000 48656C6C6F20576F72-     msg:    db "Hello World",10 ; the string to print, 10=cr
    11 00000009 6C640A             
    12                                  len:    equ $-msg       ; "$" means "here"
    13 0000000C 00000000                d: dd 0
    14                                  
    15                                  ;g:      equ 4
    16                                  ; len is a value, not an address
    17                                  
    18                                          SECTION .text       ; code section
    19                                          global main     ; make label available to linker 
    20                                  main:               ; standard  gcc  entry point
    21                                  ; printf
    22 00000000 BA0C000000                      mov edx,len     ; arg3, length of string to print
    23 00000005 B9[00000000]                    mov ecx,msg     ; arg2, pointer to string
    24 0000000A BB01000000                      mov ebx,1       ; arg1, where to write, screen
    25 0000000F B804000000                      mov eax,4       ; write sysout command to int 80 hex
    26 00000014 CD80                            int 0x80        ; interrupt 80 hex, call kernel
    27                                  ; call min
    28 00000016 6A03                            push 3 ; ebp + 16
    29 00000018 6A02                            push 2 ; ebp + 12
    30 0000001A 6A01                            push 1 ; ebp + 8
    31 0000001C E80F000000                      call min
    32 00000021 83C40C                          add esp, 12
    33                                  ; exit 
    34 00000024 BB00000000                      mov ebx,0       ; exit code, 0=normal
    35 00000029 B801000000                      mov eax,1       ; exit command to kernel
    36 0000002E CD80                            int 0x80        ; interrupt 80 hex, call kernel
    37                                  
    38                                  min:
    39                                          ; entry
    40 00000030 55                              push ebp ; store ebp
    41 00000031 89E5                            mov ebp, esp ; new stackframe
    42 00000033 83EC04                          sub esp, 4 ; ebp -4
    43                                          ;push ebx ; not needed, never used
    44                                  
    45                                          ;body
    46 00000036 8B4508                          mov eax, [ebp+8] ; eax = a
    47 00000039 8945FC                          mov [ebp-4], eax ; v = eax = a
    48                                          
    49                                          ; b < v
    50 0000003C 8B450C                          mov eax, [ebp+12] ; eax = b
    51 0000003F 3945FC                          cmp [ebp-4], eax ; v > b      
    52 00000042 7D03                            jge skip1_min
    53 00000044 8945FC                          mov [ebp-4], eax ; v = b
    54                                  skip1_min:  
    55                                          ; c < v
    56 00000047 8B4510                          mov eax, [ebp+16] ; eax = c
    57 0000004A 3945FC                          cmp [ebp-4], eax ; v > c
    58 0000004D 7D03                            jge skip2_min 
    59 0000004F 8945FC                          mov [ebp-4], eax ; v = c
    60                                  skip2_min: 
    61                                  ; printf
    62 00000052 8B45FC                          mov eax, [ebp-4] ; load v
    63 00000055 83C030                          add eax, 0x30 ; convert to ascii
    64 00000058 A3[0C000000]                    mov [d], eax ; store in v
    65 0000005D BA01000000                      mov edx, 1     ; arg3, length of string to print
    66 00000062 B9[0C000000]                    mov ecx, d     ; arg2, pointer to string
    67 00000067 BB01000000                      mov ebx, 1       ; arg1, where to write, screen
    68 0000006C B804000000                      mov eax, 4       ; write sysout command to int 80 hex
    69 00000071 CD80                            int 0x80        ; interrupt 80 hex, call kernel
    70                                          ; exit 
    71                                          ;pop ebx ; not needed never used     
    72 00000073 89EC                            mov esp, ebp ; free locals
    73 00000075 5D                              pop ebp ; restore ebp
    74 00000076 C20000                          ret 0 ; return from function (0 is default)
